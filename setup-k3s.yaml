
#####################
# Configuring HA Poxy
#####################
- name: Setup HAProxy
  hosts: haproxy
  become: true
  become_method: sudo
  gather_facts: true
  tasks:
    - name: set hostname
      hostname:
        name: "{{ new_hostname }}"

    - name: Run apg-get update & apt-get install nginx
      apt:
        name: nginx
        state: latest
        update_cache: true
    - name: Install the nginx stream module
      apt:
        name: libnginx-mod-stream
        state: latest

    - name: Create nginx configuration
      copy:
        src: files/nginx.conf
        dest: /etc/nginx/nginx.conf
        mode: 0644
      notify:
        - Restart nginx

    - name: Start nginx
      ansible.builtin.systemd:
        name: nginx
        state: started
        enabled: true

  handlers:
    - name: Restart nginx
      service:
        name: nginx
        state: restarted

#######################################
# Configuring primary control plane node
#######################################
- name: Setup Primary K3S Control Plane node
  hosts: primary
  become: true
  become_method: sudo
  gather_facts: false
  vars_files:
    - vars/nodes.yaml
  tasks:
    - name: Set primary server hostname
      hostname:
        name: "{{ new_hostname }}"
    # Try setting up some additional stuff, just for fun
    # INSTALL_K3S_EXEC="--flannel-backend=none --disable-network-policy --cluster-cidr=192.168.0.0/16"
    # --node-taint CriticalAddonsOnly=true:NoExecute
    - name: install K3s master server
      shell: curl -sfL https://get.k3s.io | sh -s - server --cluster-init  --tls-san {{ nodes.haproxy.ip }} --node-label "proxmox-node={{ node }}"

    - name: Fetch master token
      ansible.builtin.fetch:
        src: /var/lib/rancher/k3s/server/node-token
        dest: files/node-token
        flat: yes

    - name: Add HA Proxy IP to original Kube config file
      lineinfile:
        path: /etc/rancher/k3s/k3s.yaml
        regexp: "    server: https://127.0.0.1:6443"
        line: "    server: https://{{ nodes.haproxy.ip }}:6443"
        backup: yes

    - name: Fetch Kube config file
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: files/kubeconfig-k3s
        flat: yes

    - name: install argocd
      shell: |
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    - name: Wait for ArgoCD to be ready
      shell: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s
      retries: 3
      delay: 10

    - name: Copy ArgoCD configuration to remote
      copy:
        src: manifests/argocd-cmd-params-cm.yaml
        dest: /tmp/argocd-cmd-params-cm.yaml

    - name: Apply ArgoCD configuration
      shell: kubectl apply -f /tmp/argocd-cmd-params-cm.yaml

    - name: Copy ArgoCD ingress configuration to remote
      copy:
        src: manifests/argocd-server-ingress.yaml
        dest: /tmp/argocd-server-ingress.yaml

    - name: Apply ArgoCD ingress
      shell: kubectl apply -f /tmp/argocd-server-ingress.yaml

    - name: Restart ArgoCD server deployment
      shell: kubectl -n argocd rollout restart deployment/argocd-server

    - name: Wait for ArgoCD server to be ready after restart
      shell: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s
      retries: 3
      delay: 10

    - name: Delete auto-generated ArgoCD admin secret
      shell: kubectl delete secret argocd-initial-admin-secret -n argocd --ignore-not-found=true

    - name: Set ArgoCD admin password to 'admin'
      shell: |
        kubectl -n argocd patch secret argocd-secret \
          -p '{"data": {"admin.password": "'$(htpasswd -nbBC 10 "" admin | tr -d ':\n' | sed 's/$2y/$2a/' | base64 -w0)'"}}'


## And now, we install the two other servers
- name: Setup K3S Control Plane nodes
  hosts: secondary
  vars_files:
    - vars/nodes.yaml
  vars:
    token: "{{ lookup('file','files/node-token') }}"
  become: yes
  become_method: sudo
  gather_facts: yes
  tasks:
    - name: Set hostname
      hostname:
        name: "{{ new_hostname }}"

    - name: Install K3s secondary control plane servers
      shell: curl -sfL https://get.k3s.io | sh -s - server  --server https://{{ nodes.haproxy.ip }}:6443 --token={{ token }} --node-taint CriticalAddonsOnly=true:NoExecute  --tls-san {{ nodes.haproxy.ip }} --node-label "proxmox-node={{ node }}"

  handlers:
    - name: Restart secondary servers
      service:
        name: k3s
        state: restarted

##########################
# Configuring worker nodes
##########################
- name: Rename hosts
  hosts: worker
  vars:
    token: "{{ lookup('file','files/node-token') }}"
  become: true
  become_method: sudo
  gather_facts: true
  vars_files:
    - vars/nodes.yaml
  tasks:
    - name: set hostnames
      hostname:
        name: "{{ new_hostname }}"

    - name: Install K3s worker
      shell: curl -sfL https://get.k3s.io | K3S_URL=https://{{ nginx_ip}}:6443 K3S_TOKEN={{ token }} sh -s - --node-label "proxmox-node={{ node }}"
